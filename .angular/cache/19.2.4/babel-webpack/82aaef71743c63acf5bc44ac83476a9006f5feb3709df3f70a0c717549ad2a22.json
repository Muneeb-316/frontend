{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthInterceptor {\n  authService;\n  router;\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  intercept(request, next) {\n    // Get the auth token\n    const authToken = this.authService.getToken();\n    // Clone the request and add the authorization header\n    if (authToken) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${authToken}`\n        }\n      });\n    }\n    // Pass on the cloned request and handle errors\n    return next.handle(request).pipe(catchError(error => {\n      // Handle 401 Unauthorized responses\n      if (error.status === 401) {\n        this.authService.logout();\n        this.router.navigate(['/login']);\n      }\n      return throwError(() => error);\n    }));\n  }\n  static ɵfac = function AuthInterceptor_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AuthInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["throwError","catchError","AuthInterceptor","authService","router","constructor","intercept","request","next","authToken","getToken","clone","setHeaders","Authorization","handle","pipe","error","status","logout","navigate","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac"],"sources":["F:\\muneeb's\\construction-proj-master\\ang-app\\src\\app\\auth\\interceptors\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpErrorResponse\r\n} from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n    // Get the auth token\r\n    const authToken = this.authService.getToken();\r\n\r\n    // Clone the request and add the authorization header\r\n    if (authToken) {\r\n      request = request.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${authToken}`\r\n        }\r\n      });\r\n    }\r\n\r\n    // Pass on the cloned request and handle errors\r\n    return next.handle(request).pipe(\r\n      catchError((error: HttpErrorResponse) => {\r\n        // Handle 401 Unauthorized responses\r\n        if (error.status === 401) {\r\n          this.authService.logout();\r\n          this.router.navigate(['/login']);\r\n        }\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n}"],"mappings":"AAQA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;;AAK3C,OAAM,MAAOC,eAAe;EAGhBC,WAAA;EACAC,MAAA;EAFVC,YACUF,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHE,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD;IACA,MAAMC,SAAS,GAAG,IAAI,CAACN,WAAW,CAACO,QAAQ,EAAE;IAE7C;IACA,IAAID,SAAS,EAAE;MACbF,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUJ,SAAS;;OAErC,CAAC;IACJ;IAEA;IACA,OAAOD,IAAI,CAACM,MAAM,CAACP,OAAO,CAAC,CAACQ,IAAI,CAC9Bd,UAAU,CAAEe,KAAwB,IAAI;MACtC;MACA,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxB,IAAI,CAACd,WAAW,CAACe,MAAM,EAAE;QACzB,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAClC;MACA,OAAOnB,UAAU,CAAC,MAAMgB,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;;qCA/BWd,eAAe,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;;WAAfvB,eAAe;IAAAwB,OAAA,EAAfxB,eAAe,CAAAyB;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}