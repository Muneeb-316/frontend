{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class GuestGuard {\n  authService;\n  router;\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(next, state) {\n    if (!this.authService.isAuthenticated()) {\n      return true; // Allow access for guests\n    }\n    // Redirect authenticated users to dashboard/home\n    return this.router.parseUrl('/dashboard');\n    // Or use createUrlTree if you need query params:\n    // return this.router.createUrlTree(['/dashboard']);\n  }\n  static ɵfac = function GuestGuard_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || GuestGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GuestGuard,\n    factory: GuestGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["GuestGuard","authService","router","constructor","canActivate","next","state","isAuthenticated","parseUrl","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["F:\\muneeb's\\construction-proj-master\\ang-app\\src\\app\\auth\\guards\\guest.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GuestGuard implements CanActivate {\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): boolean | UrlTree {\r\n    \r\n    if (!this.authService.isAuthenticated()) {\r\n      return true; // Allow access for guests\r\n    }\r\n\r\n    // Redirect authenticated users to dashboard/home\r\n    return this.router.parseUrl('/dashboard'); \r\n    // Or use createUrlTree if you need query params:\r\n    // return this.router.createUrlTree(['/dashboard']);\r\n  }\r\n}"],"mappings":";;;AAOA,OAAM,MAAOA,UAAU;EAGXC,WAAA;EACAC,MAAA;EAFVC,YACUF,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHE,WAAWA,CACTC,IAA4B,EAC5BC,KAA0B;IAG1B,IAAI,CAAC,IAAI,CAACL,WAAW,CAACM,eAAe,EAAE,EAAE;MACvC,OAAO,IAAI,CAAC,CAAC;IACf;IAEA;IACA,OAAO,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,YAAY,CAAC;IACzC;IACA;EACF;;qCApBWR,UAAU,EAAAS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;;WAAVd,UAAU;IAAAe,OAAA,EAAVf,UAAU,CAAAgB,IAAA;IAAAC,UAAA,EAFT;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}