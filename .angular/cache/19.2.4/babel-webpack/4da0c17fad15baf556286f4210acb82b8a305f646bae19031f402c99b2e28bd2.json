{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-toastr\";\nexport class AuthGuard {\n  authService;\n  router;\n  toastr;\n  constructor(authService, router, toastr) {\n    this.authService = authService;\n    this.router = router;\n    this.toastr = toastr;\n  }\n  canActivate(next, state) {\n    if (this.authService.isAuthenticated()) {\n      return true;\n    }\n    this.toastr.warning('Please login to access this page');\n    return this.router.createUrlTree(['/login'], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n  }\n  static ɵfac = function AuthGuard_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ToastrService));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthGuard","authService","router","toastr","constructor","canActivate","next","state","isAuthenticated","warning","createUrlTree","queryParams","returnUrl","url","i0","ɵɵinject","i1","AuthService","i2","Router","i3","ToastrService","factory","ɵfac","providedIn"],"sources":["F:\\muneeb's\\construction-proj-master\\ang-app\\src\\app\\auth\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private toastr: ToastrService\r\n  ) {}\r\n\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    \r\n    if (this.authService.isAuthenticated()) {\r\n      return true;\r\n    }\r\n\r\n    this.toastr.warning('Please login to access this page');\r\n    return this.router.createUrlTree(['/login'], {\r\n      queryParams: { returnUrl: state.url }\r\n    });\r\n  }\r\n}"],"mappings":";;;;AASA,OAAM,MAAOA,SAAS;EAGVC,WAAA;EACAC,MAAA;EACAC,MAAA;EAHVC,YACUH,WAAwB,EACxBC,MAAc,EACdC,MAAqB;IAFrB,KAAAF,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHE,WAAWA,CACTC,IAA4B,EAC5BC,KAA0B;IAG1B,IAAI,IAAI,CAACN,WAAW,CAACO,eAAe,EAAE,EAAE;MACtC,OAAO,IAAI;IACb;IAEA,IAAI,CAACL,MAAM,CAACM,OAAO,CAAC,kCAAkC,CAAC;IACvD,OAAO,IAAI,CAACP,MAAM,CAACQ,aAAa,CAAC,CAAC,QAAQ,CAAC,EAAE;MAC3CC,WAAW,EAAE;QAAEC,SAAS,EAAEL,KAAK,CAACM;MAAG;KACpC,CAAC;EACJ;;qCArBWb,SAAS,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,aAAA;EAAA;;WAATrB,SAAS;IAAAsB,OAAA,EAATtB,SAAS,CAAAuB,IAAA;IAAAC,UAAA,EAFR;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}