{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ProjectService {\n  projects = [{\n    id: '1',\n    name: 'Residential Building',\n    description: 'Construction of a 3-story residential building',\n    startDate: '2024-01-15',\n    endDate: '2024-12-31',\n    status: 'In Progress',\n    budget: 500000,\n    location: 'New York',\n    materials: [{\n      type: 'Bricks',\n      quantity: 5000,\n      unit: 'pieces',\n      date: '2024-01-20',\n      price: 2.5,\n      category: 'Structural'\n    }, {\n      type: 'Steel',\n      quantity: 2000,\n      unit: 'kg',\n      date: '2024-01-25',\n      price: 15,\n      category: 'Structural'\n    }, {\n      type: 'Cement',\n      quantity: 100,\n      unit: 'bags',\n      date: '2024-02-01',\n      price: 12,\n      category: 'Structural'\n    }, {\n      type: 'Glass',\n      quantity: 50,\n      unit: 'panels',\n      date: '2024-02-15',\n      price: 200,\n      category: 'Finishing'\n    }, {\n      type: 'Concrete',\n      quantity: 2000,\n      unit: 'cubic meters',\n      date: '2024-02-20',\n      price: 75,\n      category: 'Structural'\n    }, {\n      type: 'Wood',\n      quantity: 500,\n      unit: 'boards',\n      date: '2024-03-01',\n      price: 45,\n      category: 'Structural'\n    }, {\n      type: 'Paint',\n      quantity: 100,\n      unit: 'gallons',\n      date: '2024-03-15',\n      price: 35,\n      category: 'Finishing'\n    }, {\n      type: 'Tiles',\n      quantity: 200,\n      unit: 'boxes',\n      date: '2024-03-20',\n      price: 40,\n      category: 'Finishing'\n    }]\n  }, {\n    id: '2',\n    name: 'Office Complex',\n    description: 'Modern office building with 5 floors',\n    startDate: '2024-02-01',\n    endDate: '2025-06-30',\n    status: 'In Progress',\n    budget: 800000,\n    location: 'Los Angeles',\n    materials: [{\n      type: 'Steel',\n      quantity: 3000,\n      unit: 'kg',\n      date: '2024-02-10',\n      price: 15,\n      category: 'Structural'\n    }, {\n      type: 'Concrete',\n      quantity: 3000,\n      unit: 'cubic meters',\n      date: '2024-02-15',\n      price: 75,\n      category: 'Structural'\n    }, {\n      type: 'Glass',\n      quantity: 100,\n      unit: 'panels',\n      date: '2024-03-01',\n      price: 200,\n      category: 'Finishing'\n    }, {\n      type: 'Electrical Wiring',\n      quantity: 5000,\n      unit: 'meters',\n      date: '2024-03-10',\n      price: 5,\n      category: 'Electrical'\n    }, {\n      type: 'Plumbing Pipes',\n      quantity: 2000,\n      unit: 'meters',\n      date: '2024-03-15',\n      price: 8,\n      category: 'Plumbing'\n    }]\n  }, {\n    id: '3',\n    name: 'Shopping Mall',\n    description: 'Large shopping complex with parking',\n    startDate: '2024-03-01',\n    endDate: '2025-12-31',\n    status: 'On Hold',\n    budget: 1200000,\n    location: 'Chicago',\n    materials: [{\n      type: 'Concrete',\n      quantity: 5000,\n      unit: 'cubic meters',\n      date: '2024-03-10',\n      price: 75,\n      category: 'Structural'\n    }, {\n      type: 'Steel',\n      quantity: 4000,\n      unit: 'kg',\n      date: '2024-03-15',\n      price: 15,\n      category: 'Structural'\n    }, {\n      type: 'Glass',\n      quantity: 200,\n      unit: 'panels',\n      date: '2024-03-20',\n      price: 200,\n      category: 'Finishing'\n    }]\n  }];\n  constructor() {}\n  getProjects() {\n    return of(this.projects);\n  }\n  getProject(id) {\n    return of(this.projects.find(project => project.id === id));\n  }\n  createProject(project) {\n    const newProject = {\n      ...project,\n      id: (this.projects.length + 1).toString()\n    };\n    this.projects.push(newProject);\n    return of(newProject);\n  }\n  addMaterialToProject(projectId, material) {\n    const project = this.projects.find(p => p.id === projectId);\n    if (project) {\n      project.materials.push(material);\n      return of(true);\n    }\n    return of(false);\n  }\n  deleteMaterialFromProject(projectId, material) {\n    const project = this.projects.find(p => p.id === projectId);\n    if (project) {\n      const index = project.materials.findIndex(m => m.type === material.type && m.date === material.date && m.quantity === material.quantity);\n      if (index !== -1) {\n        project.materials.splice(index, 1);\n        return of(true);\n      }\n    }\n    return of(false);\n  }\n  updateMaterialInProject(projectId, updatedMaterial) {\n    const project = this.projects.find(p => p.id === projectId);\n    if (project) {\n      const index = project.materials.findIndex(m => m.type === updatedMaterial.type && m.date === updatedMaterial.date);\n      if (index !== -1) {\n        project.materials[index] = updatedMaterial;\n        return of(true);\n      }\n    }\n    return of(false);\n  }\n  static ɵfac = function ProjectService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ProjectService)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProjectService,\n    factory: ProjectService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["of","ProjectService","projects","id","name","description","startDate","endDate","status","budget","location","materials","type","quantity","unit","date","price","category","constructor","getProjects","getProject","find","project","createProject","newProject","length","toString","push","addMaterialToProject","projectId","material","p","deleteMaterialFromProject","index","findIndex","m","splice","updateMaterialInProject","updatedMaterial","factory","ɵfac","providedIn"],"sources":["F:\\muneeb's\\construction-proj-master\\ang-app\\src\\app\\services\\project.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { Project, Material } from '../models/project.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n  private projects: Project[] = [\n    {\n      id: '1',\n      name: 'Residential Building',\n      description: 'Construction of a 3-story residential building',\n      startDate: '2024-01-15',\n      endDate: '2024-12-31',\n      status: 'In Progress',\n      budget: 500000,\n      location: 'New York',\n      materials: [\n        { type: 'Bricks', quantity: 5000, unit: 'pieces', date: '2024-01-20', price: 2.5, category: 'Structural' },\n        { type: 'Steel', quantity: 2000, unit: 'kg', date: '2024-01-25', price: 15, category: 'Structural' },\n        { type: 'Cement', quantity: 100, unit: 'bags', date: '2024-02-01', price: 12, category: 'Structural' },\n        { type: 'Glass', quantity: 50, unit: 'panels', date: '2024-02-15', price: 200, category: 'Finishing' },\n        { type: 'Concrete', quantity: 2000, unit: 'cubic meters', date: '2024-02-20', price: 75, category: 'Structural' },\n        { type: 'Wood', quantity: 500, unit: 'boards', date: '2024-03-01', price: 45, category: 'Structural' },\n        { type: 'Paint', quantity: 100, unit: 'gallons', date: '2024-03-15', price: 35, category: 'Finishing' },\n        { type: 'Tiles', quantity: 200, unit: 'boxes', date: '2024-03-20', price: 40, category: 'Finishing' }\n      ]\n    },\n    {\n      id: '2',\n      name: 'Office Complex',\n      description: 'Modern office building with 5 floors',\n      startDate: '2024-02-01',\n      endDate: '2025-06-30',\n      status: 'In Progress',\n      budget: 800000,\n      location: 'Los Angeles',\n      materials: [\n        { type: 'Steel', quantity: 3000, unit: 'kg', date: '2024-02-10', price: 15, category: 'Structural' },\n        { type: 'Concrete', quantity: 3000, unit: 'cubic meters', date: '2024-02-15', price: 75, category: 'Structural' },\n        { type: 'Glass', quantity: 100, unit: 'panels', date: '2024-03-01', price: 200, category: 'Finishing' },\n        { type: 'Electrical Wiring', quantity: 5000, unit: 'meters', date: '2024-03-10', price: 5, category: 'Electrical' },\n        { type: 'Plumbing Pipes', quantity: 2000, unit: 'meters', date: '2024-03-15', price: 8, category: 'Plumbing' }\n      ]\n    },\n    {\n      id: '3',\n      name: 'Shopping Mall',\n      description: 'Large shopping complex with parking',\n      startDate: '2024-03-01',\n      endDate: '2025-12-31',\n      status: 'On Hold',\n      budget: 1200000,\n      location: 'Chicago',\n      materials: [\n        { type: 'Concrete', quantity: 5000, unit: 'cubic meters', date: '2024-03-10', price: 75, category: 'Structural' },\n        { type: 'Steel', quantity: 4000, unit: 'kg', date: '2024-03-15', price: 15, category: 'Structural' },\n        { type: 'Glass', quantity: 200, unit: 'panels', date: '2024-03-20', price: 200, category: 'Finishing' }\n      ]\n    }\n  ];\n\n  constructor() { }\n\n  getProjects(): Observable<Project[]> {\n    return of(this.projects);\n  }\n\n  getProject(id: string): Observable<Project | undefined> {\n    return of(this.projects.find(project => project.id === id));\n  }\n\n  createProject(project: Omit<Project, 'id'>): Observable<Project> {\n    const newProject: Project = {\n      ...project,\n      id: (this.projects.length + 1).toString()\n    };\n    this.projects.push(newProject);\n    return of(newProject);\n  }\n\n  addMaterialToProject(projectId: string, material: Material): Observable<boolean> {\n    const project = this.projects.find(p => p.id === projectId);\n    if (project) {\n      project.materials.push(material);\n      return of(true);\n    }\n    return of(false);\n  }\n\n  deleteMaterialFromProject(projectId: string, material: Material): Observable<boolean> {\n    const project = this.projects.find(p => p.id === projectId);\n    if (project) {\n      const index = project.materials.findIndex(m => \n        m.type === material.type && \n        m.date === material.date && \n        m.quantity === material.quantity\n      );\n      if (index !== -1) {\n        project.materials.splice(index, 1);\n        return of(true);\n      }\n    }\n    return of(false);\n  }\n\n  updateMaterialInProject(projectId: string, updatedMaterial: Material): Observable<boolean> {\n    const project = this.projects.find(p => p.id === projectId);\n    if (project) {\n      const index = project.materials.findIndex(m => \n        m.type === updatedMaterial.type && \n        m.date === updatedMaterial.date\n      );\n      if (index !== -1) {\n        project.materials[index] = updatedMaterial;\n        return of(true);\n      }\n    }\n    return of(false);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}