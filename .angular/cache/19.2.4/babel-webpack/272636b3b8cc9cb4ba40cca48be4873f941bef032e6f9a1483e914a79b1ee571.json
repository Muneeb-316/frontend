{"ast":null,"code":"import { BehaviorSubject, tap, catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  http;\n  router;\n  apiUrl = 'https://localhost:7097/api/Login/login';\n  tokenKey = 'auth_token';\n  authStatus = new BehaviorSubject(this.hasToken());\n  // Expose observable for components to subscribe to\n  authStatus$ = this.authStatus.asObservable();\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n  }\n  // Login method\n  login(username, password) {\n    return this.http.post(this.apiUrl, {\n      username,\n      password\n    }).pipe(tap(response => {\n      if (response && response.token) {\n        this.storeToken(response.token);\n        this.authStatus.next(true);\n      }\n    }), catchError(error => {\n      console.error('Login error:', error);\n      return throwError(() => error);\n    }));\n  }\n  // Logout method\n  logout() {\n    this.removeToken();\n    this.authStatus.next(false);\n    this.router.navigate(['/login']);\n  }\n  // Check if user is authenticated\n  isAuthenticated() {\n    return this.hasToken();\n  }\n  // Get stored token\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  // Private helper methods\n  storeToken(token) {\n    localStorage.setItem(this.tokenKey, token);\n  }\n  removeToken() {\n    localStorage.removeItem(this.tokenKey);\n  }\n  hasToken() {\n    return !!this.getToken();\n  }\n  // Optional: Token expiration check (if your token has expiry)\n  isTokenExpired(token) {\n    // Implement token expiration logic if needed\n    // Example: decode JWT and check expiry date\n    return false;\n  }\n  static ɵfac = function AuthService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","tap","catchError","throwError","AuthService","http","router","apiUrl","tokenKey","authStatus","hasToken","authStatus$","asObservable","constructor","login","username","password","post","pipe","response","token","storeToken","next","error","console","logout","removeToken","navigate","isAuthenticated","getToken","localStorage","getItem","setItem","removeItem","isTokenExpired","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["F:\\muneeb's\\construction-proj-master\\ang-app\\src\\app\\auth\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject, tap, catchError, throwError } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private readonly apiUrl = 'https://localhost:7097/api/Login/login';\r\n  private tokenKey = 'auth_token';\r\n  private authStatus = new BehaviorSubject<boolean>(this.hasToken());\r\n  \r\n  // Expose observable for components to subscribe to\r\n  authStatus$ = this.authStatus.asObservable();\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private router: Router\r\n  ) { }\r\n\r\n  // Login method\r\n  login(username: string, password: string): Observable<any> {\r\n    return this.http.post<any>(this.apiUrl, { username, password }).pipe(\r\n      tap(response => {\r\n        if (response && response.token) {\r\n          this.storeToken(response.token);\r\n          this.authStatus.next(true);\r\n        }\r\n      }),\r\n      catchError(error => {\r\n        console.error('Login error:', error);\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  // Logout method\r\n  logout(): void {\r\n    this.removeToken();\r\n    this.authStatus.next(false);\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  // Check if user is authenticated\r\n  isAuthenticated(): boolean {\r\n    return this.hasToken();\r\n  }\r\n\r\n  // Get stored token\r\n  getToken(): string | null {\r\n    return localStorage.getItem(this.tokenKey);\r\n  }\r\n\r\n  // Private helper methods\r\n  private storeToken(token: string): void {\r\n    localStorage.setItem(this.tokenKey, token);\r\n  }\r\n\r\n  private removeToken(): void {\r\n    localStorage.removeItem(this.tokenKey);\r\n  }\r\n\r\n  private hasToken(): boolean {\r\n    return !!this.getToken();\r\n  }\r\n\r\n  // Optional: Token expiration check (if your token has expiry)\r\n  private isTokenExpired(token: string): boolean {\r\n    // Implement token expiration logic if needed\r\n    // Example: decode JWT and check expiry date\r\n    return false;\r\n  }\r\n}"],"mappings":"AAEA,SAAqBA,eAAe,EAAEC,GAAG,EAAEC,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;;AAM/E,OAAM,MAAOC,WAAW;EASZC,IAAA;EACAC,MAAA;EATOC,MAAM,GAAG,wCAAwC;EAC1DC,QAAQ,GAAG,YAAY;EACvBC,UAAU,GAAG,IAAIT,eAAe,CAAU,IAAI,CAACU,QAAQ,EAAE,CAAC;EAElE;EACAC,WAAW,GAAG,IAAI,CAACF,UAAU,CAACG,YAAY,EAAE;EAE5CC,YACUR,IAAgB,EAChBC,MAAc;IADd,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,MAAM,GAANA,MAAM;EACZ;EAEJ;EACAQ,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAM,IAAI,CAACV,MAAM,EAAE;MAAEQ,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CAACE,IAAI,CAClEjB,GAAG,CAACkB,QAAQ,IAAG;MACb,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAC9B,IAAI,CAACC,UAAU,CAACF,QAAQ,CAACC,KAAK,CAAC;QAC/B,IAAI,CAACX,UAAU,CAACa,IAAI,CAAC,IAAI,CAAC;MAC5B;IACF,CAAC,CAAC,EACFpB,UAAU,CAACqB,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,OAAOpB,UAAU,CAAC,MAAMoB,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;EAEA;EACAE,MAAMA,CAAA;IACJ,IAAI,CAACC,WAAW,EAAE;IAClB,IAAI,CAACjB,UAAU,CAACa,IAAI,CAAC,KAAK,CAAC;IAC3B,IAAI,CAAChB,MAAM,CAACqB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEA;EACAC,eAAeA,CAAA;IACb,OAAO,IAAI,CAAClB,QAAQ,EAAE;EACxB;EAEA;EACAmB,QAAQA,CAAA;IACN,OAAOC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACvB,QAAQ,CAAC;EAC5C;EAEA;EACQa,UAAUA,CAACD,KAAa;IAC9BU,YAAY,CAACE,OAAO,CAAC,IAAI,CAACxB,QAAQ,EAAEY,KAAK,CAAC;EAC5C;EAEQM,WAAWA,CAAA;IACjBI,YAAY,CAACG,UAAU,CAAC,IAAI,CAACzB,QAAQ,CAAC;EACxC;EAEQE,QAAQA,CAAA;IACd,OAAO,CAAC,CAAC,IAAI,CAACmB,QAAQ,EAAE;EAC1B;EAEA;EACQK,cAAcA,CAACd,KAAa;IAClC;IACA;IACA,OAAO,KAAK;EACd;;qCAhEWhB,WAAW,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;;WAAXpC,WAAW;IAAAqC,OAAA,EAAXrC,WAAW,CAAAsC,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}