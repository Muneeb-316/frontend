{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nlet LoginComponent = class LoginComponent {\n  router;\n  authService;\n  toastr;\n  loginData = {\n    email: '',\n    password: '',\n    rememberMe: false\n  };\n  isLoading = false;\n  showPassword = false;\n  errorMessage = '';\n  successMessage = '';\n  constructor(router, authService, toastr) {\n    this.router = router;\n    this.authService = authService;\n    this.toastr = toastr;\n  }\n  togglePasswordVisibility() {\n    this.showPassword = !this.showPassword;\n  }\n  login(form) {\n    // Reset messages\n    this.errorMessage = '';\n    this.successMessage = '';\n    // Validate form\n    if (form.invalid) {\n      this.errorMessage = 'Please fill all required fields correctly';\n      return;\n    }\n    // Show loading state\n    this.isLoading = true;\n    // Call authentication service\n    this.authService.login(this.loginData.email, this.loginData.password).subscribe({\n      next: response => {\n        this.isLoading = false;\n        this.toastr.success('Login successful!');\n        // Handle remember me functionality\n        if (this.loginData.rememberMe) {\n          localStorage.setItem('rememberedEmail', this.loginData.email);\n        } else {\n          localStorage.removeItem('rememberedEmail');\n        }\n        // Redirect to dashboard\n        this.router.navigate(['/dashboard']);\n      },\n      error: error => {\n        this.isLoading = false;\n        this.errorMessage = error.message || 'Login failed. Please try again.';\n        this.toastr.error(this.errorMessage);\n      }\n    });\n  }\n  forgotPassword() {\n    // In a real app, this would navigate to a password reset page\n    this.toastr.info('Password reset functionality would be implemented here');\n    // this.router.navigate(['/forgot-password']);\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [CommonModule, FormsModule, RouterModule],\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"names":["Component","CommonModule","FormsModule","RouterModule","LoginComponent","router","authService","toastr","loginData","email","password","rememberMe","isLoading","showPassword","errorMessage","successMessage","constructor","togglePasswordVisibility","login","form","invalid","subscribe","next","response","success","localStorage","setItem","removeItem","navigate","error","message","forgotPassword","info","__decorate","selector","standalone","imports","templateUrl","styleUrls"],"sources":["F:\\muneeb's\\construction-proj-master\\ang-app\\src\\app\\components\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, NgForm } from '@angular/forms';\nimport { Router, RouterModule } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [CommonModule, FormsModule, RouterModule],\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent {\n  loginData = {\n    email: '',\n    password: '',\n    rememberMe: false\n  };\n  \n  isLoading = false;\n  showPassword = false;\n  errorMessage = '';\n  successMessage = '';\n\n  constructor(\n    private router: Router,\n    private authService: AuthService,\n    private toastr: ToastrService\n  ) {}\n\n  togglePasswordVisibility(): void {\n    this.showPassword = !this.showPassword;\n  }\n\n  login(form: NgForm): void {\n    // Reset messages\n    this.errorMessage = '';\n    this.successMessage = '';\n    \n    // Validate form\n    if (form.invalid) {\n      this.errorMessage = 'Please fill all required fields correctly';\n      return;\n    }\n    \n    // Show loading state\n    this.isLoading = true;\n    \n    // Call authentication service\n    this.authService.login(this.loginData.email, this.loginData.password)\n      .subscribe({\n        next: (response) => {\n          this.isLoading = false;\n          this.toastr.success('Login successful!');\n          \n          // Handle remember me functionality\n          if (this.loginData.rememberMe) {\n            localStorage.setItem('rememberedEmail', this.loginData.email);\n          } else {\n            localStorage.removeItem('rememberedEmail');\n          }\n          \n          // Redirect to dashboard\n          this.router.navigate(['/dashboard']);\n        },\n        error: (error) => {\n          this.isLoading = false;\n          this.errorMessage = error.message || 'Login failed. Please try again.';\n          this.toastr.error(this.errorMessage);\n        }\n      });\n  }\n\n  forgotPassword(): void {\n    // In a real app, this would navigate to a password reset page\n    this.toastr.info('Password reset functionality would be implemented here');\n    // this.router.navigate(['/forgot-password']);\n  }\n}"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,WAAW,QAAgB,gBAAgB;AACpD,SAAiBC,YAAY,QAAQ,iBAAiB;AAW/C,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAafC,MAAA;EACAC,WAAA;EACAC,MAAA;EAdVC,SAAS,GAAG;IACVC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE;GACb;EAEDC,SAAS,GAAG,KAAK;EACjBC,YAAY,GAAG,KAAK;EACpBC,YAAY,GAAG,EAAE;EACjBC,cAAc,GAAG,EAAE;EAEnBC,YACUX,MAAc,EACdC,WAAwB,EACxBC,MAAqB;IAFrB,KAAAF,MAAM,GAANA,MAAM;IACN,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHU,wBAAwBA,CAAA;IACtB,IAAI,CAACJ,YAAY,GAAG,CAAC,IAAI,CAACA,YAAY;EACxC;EAEAK,KAAKA,CAACC,IAAY;IAChB;IACA,IAAI,CAACL,YAAY,GAAG,EAAE;IACtB,IAAI,CAACC,cAAc,GAAG,EAAE;IAExB;IACA,IAAII,IAAI,CAACC,OAAO,EAAE;MAChB,IAAI,CAACN,YAAY,GAAG,2CAA2C;MAC/D;IACF;IAEA;IACA,IAAI,CAACF,SAAS,GAAG,IAAI;IAErB;IACA,IAAI,CAACN,WAAW,CAACY,KAAK,CAAC,IAAI,CAACV,SAAS,CAACC,KAAK,EAAE,IAAI,CAACD,SAAS,CAACE,QAAQ,CAAC,CAClEW,SAAS,CAAC;MACTC,IAAI,EAAGC,QAAQ,IAAI;QACjB,IAAI,CAACX,SAAS,GAAG,KAAK;QACtB,IAAI,CAACL,MAAM,CAACiB,OAAO,CAAC,mBAAmB,CAAC;QAExC;QACA,IAAI,IAAI,CAAChB,SAAS,CAACG,UAAU,EAAE;UAC7Bc,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAAClB,SAAS,CAACC,KAAK,CAAC;QAC/D,CAAC,MAAM;UACLgB,YAAY,CAACE,UAAU,CAAC,iBAAiB,CAAC;QAC5C;QAEA;QACA,IAAI,CAACtB,MAAM,CAACuB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;MACtC,CAAC;MACDC,KAAK,EAAGA,KAAK,IAAI;QACf,IAAI,CAACjB,SAAS,GAAG,KAAK;QACtB,IAAI,CAACE,YAAY,GAAGe,KAAK,CAACC,OAAO,IAAI,iCAAiC;QACtE,IAAI,CAACvB,MAAM,CAACsB,KAAK,CAAC,IAAI,CAACf,YAAY,CAAC;MACtC;KACD,CAAC;EACN;EAEAiB,cAAcA,CAAA;IACZ;IACA,IAAI,CAACxB,MAAM,CAACyB,IAAI,CAAC,wDAAwD,CAAC;IAC1E;EACF;CACD;AAlEY5B,cAAc,GAAA6B,UAAA,EAP1BjC,SAAS,CAAC;EACTkC,QAAQ,EAAE,WAAW;EACrBC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CAACnC,YAAY,EAAEC,WAAW,EAAEC,YAAY,CAAC;EAClDkC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWlC,cAAc,CAkE1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}